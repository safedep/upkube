package views

import (
    "strings"
    "k8s.io/client-go/kubernetes"
    "k8s.io/api/apps/v1"
    "strconv"

    "github.com/kunalsin9h/upkube/internal/kubeapi"
	"github.com/charmbracelet/log"
)

templ Dashboard(userEmail string, clientset *kubernetes.Clientset, selectedNamespace string) {
    @Navigation(userEmail)
    @Content(clientset, selectedNamespace)
}

templ Navigation(userEmail string) {
    {{ var tokens = strings.Split(userEmail, "@") }}
    {{ var userName = tokens[0] }}
    {{ var orgEmail = tokens[1] }}

    <div class="container mx-auto flex justify-between gap-4 items-center px-2 md:px-0 py-4">
        <div class="p-2 my-2 shadow-sm bg-white flex items-center gap-4">
            <a href="/" class="font-semibold">Deployments</a>

            // TODO: Activity Logs & Request & Approve Workflow
            // <a href="/logs" class="text-gray-400/80">Activity Logs</a>
        </div>
        <div class="flex items-center gap-4">
            <div class="p-2 my-2 shadow-sm bg-white flex items-center gap-4">
                <p><span class="font-semibold">{ userName }</span><span class="text-gray-400"> { " " }{ orgEmail }</span></p>
            </div>
            <div>
                <a href="https://github.com/kunalsin9h/upkube" target="_blank" rel="noopener noreferrer" title="View on GitHub" class="hidden sm:flex items-center gap-2 text-gray-600 hover:text-black">
                    <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                        <path fill-rule="evenodd" clip-rule="evenodd"
                        d="M12 2C6.477 2 2 6.484 2 12.021c0 4.426 2.865 8.18 6.839 9.504.5.092.682-.217.682-.482 0-.237-.009-.868-.014-1.703-2.782.605-3.369-1.342-3.369-1.342-.454-1.154-1.11-1.462-1.11-1.462-.908-.62.069-.608.069-.608 1.004.07 1.532 1.032 1.532 1.032.892 1.53 2.341 1.089 2.91.833.092-.647.35-1.089.636-1.34-2.221-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.025A9.564 9.564 0 0 1 12 6.844c.85.004 1.705.115 2.504.337 1.909-1.295 2.748-1.025 2.748-1.025.546 1.378.202 2.397.1 2.65.64.7 1.028 1.595 1.028 2.688 0 3.847-2.337 4.695-4.566 4.944.359.309.678.92.678 1.855 0 1.338-.012 2.419-.012 2.749 0 .268.18.579.688.481C19.138 20.197 22 16.444 22 12.021 22 6.484 17.523 2 12 2z">
                        </path>
                    </svg>
                    <span class="hidden sm:inline">GitHub</span>
                </a>
            </div>
        </div>
    </div>
}

templ Content(clientset *kubernetes.Clientset, selectedNamespace string) {
    {{ 
        deployments, err := kubeapi.ListDeployments(clientset, selectedNamespace) 
        
        if err != nil {
            log.Errorf("Failed to list deployments: %v", err)
        }
    }}

    if err != nil {
        @KubeError()
    } else {
        <div class="min-h-screen">
            <div class="container mx-auto py-8 px-2 md:px-0 ">
                @DeploymentsHeader(clientset, len(deployments.Items), selectedNamespace)
                if len(deployments.Items) == 0 {
                    @NoDeployments()
                } else {
                    <div class="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
                        for _, dep := range deployments.Items {
                            @DeploymentCard(dep, clientset)
                        }
                    </div>
                }
            </div>
        </div>
    }
}

templ KubeError() {
    <div class="min-h-screen flex items-center justify-center">
        <div class="bg-white shadow-lg p-8 max-w-md border">
            <div class="flex items-center mb-4">
                <svg class="w-8 h-8 text-red-500 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.962-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                </svg>
                <h2 class="text-xl font-semibold text-gray-800">Connection Error</h2>
            </div>
            <p class="text-gray-600 mb-4">Unable to connect to Kubernetes cluster. Please check your connection and try again.</p>
            <a href="/" class="inline-block mt-2 px-4 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700 transition">Go to Home</a>
        </div>
    </div>
}

templ DeploymentsHeader(clientset *kubernetes.Clientset, total int, selectedNamespace string) {
    {{ 
        namespaces, err := kubeapi.GetAllNameSpaces(clientset) 
        
        if err != nil {
            log.Errorf("Failed to load namespaces: %v", err)
        }
    }}

    if err != nil {
        @KubeError()
    } else {
        <div class="mb-6 flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
            <div class="flex flex-col sm:flex-row sm:items-center gap-2 sm:gap-4">
                <h1 class="text-lg font-semibold text-gray-800">Deployments</h1>
                <form method="get" class="flex items-center">
                    <label for="namespace" class="text-sm text-gray-600 mr-2">Namespace:</label>
                    <select
                        id="namespace"
                        name="namespace"
                        class="border border-gray-300 bg-white text-gray-800 text-sm px-2 py-1 focus:outline-none focus:border-indigo-500"
                        style="box-shadow:none; border-radius:0; min-width:120px;"
                        onchange="this.form.submit()"
                    >
                        for _, ns := range namespaces {
                            if selectedNamespace == ns {
                                <option value={ns} selected>{ ns }</option>
                            } else {
                                <option value={ns}>{ ns }</option>
                            }
                        }
                    </select>
                </form>
            </div>
            <span class="text-gray-800 text-sm p-2 bg-white shadow-sm w-full sm:w-auto text-center">Total: <span class="font-bold">{ strconv.Itoa(total) }</span></span>
        </div>
    }
}

templ NoDeployments() {
    <div class="bg-white shadow-sm p-12 text-center">
        <svg class="w-16 h-16 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2M4 13h2m0 0V9a2 2 0 012-2h2m0 0V6a2 2 0 012-2h2.586a1 1 0 01.707.293l2.414 2.414a1 1 0 01.293.707V9a2 2 0 01-2 2h-2m-6 0a2 2 0 002 2v1a2 2 0 01-2 2h-2a2 2 0 01-2-2v-1a2 2 0 012-2h2z"></path>
        </svg>
        <h3 class="text-lg font-semibold text-gray-700 mb-2">No Deployments Found</h3>
        <p class="text-gray-500">There are no deployments in the default namespace.</p>
    </div>
}

templ DeploymentCardHeader(dep v1.Deployment, statusText string, statusColor string, statusBg string) {
    <div class="p-6 border-b border-gray-100 flex items-center justify-between">
        <div>
            <h3 class="text-lg font-semibold text-gray-800 mb-1">{ dep.Name }</h3>
            <span class={ "inline-flex items-center px-2.5 py-0.5 text-xs font-medium " + statusBg + " " + statusColor }>
                <svg class={ "w-2 h-2 mr-1 " + statusColor } fill="currentColor" viewBox="0 0 8 8">
                    <circle cx="4" cy="4" r="3"/>
                </svg>
                { statusText }
            </span>
        </div>
        <div class="text-right">
            <span class="text-xs text-gray-500">Namespace</span>
            <div class="font-medium text-indigo-600">{ dep.Namespace }</div>
        </div>
    </div>
}

templ DeploymentCardImage(image string, imageErrorReason string, imageErrorMsg string) {
    <div class="mb-4">
        <div class="text-xs text-gray-500 mb-1">Image</div>
        <div class="font-mono text-sm text-gray-800 break-all">{ image }</div>
        if imageErrorReason != "" {
            <div class="mt-2 p-2 bg-red-50 border border-red-200 text-xs text-red-700 rounded">
                <strong>Image Error:</strong> { imageErrorReason }
                if imageErrorMsg != "" {
                    <div class="mt-1">{ imageErrorMsg }</div>
                }
            </div>
        }
    </div>
}

templ DeploymentCardReplicas(readyReplicas int32, totalReplicas int32, isHealthy bool) {
    <div class="mb-4">
        <div class="flex items-center justify-between text-sm">
            <span class="text-gray-600">Replicas</span>
            <span class="font-medium">{ strconv.Itoa(int(readyReplicas)) }/{ strconv.Itoa(int(totalReplicas)) }</span>
        </div>
        <div class="w-full bg-gray-200 h-2">
            {{
                percentage := float64(0)
                if totalReplicas > 0 {
                    percentage = float64(readyReplicas) / float64(totalReplicas) * 100
                }
                progressColor := "bg-green-500"
                if !isHealthy {
                    if readyReplicas == 0 {
                        progressColor = "bg-red-500"
                    } else {
                        progressColor = "bg-yellow-500"
                    }
                }
            }}
            <div class={ progressColor + " h-2 transition-all duration-300" } style={ "width: " + strconv.FormatFloat(percentage, 'f', 0, 64) + "%" }></div>
        </div>
    </div>
}

templ DeploymentCardActions(dep v1.Deployment, image string) {
    <div class="flex items-center justify-between text-xs text-gray-500 mt-2">
        <span>Created: { dep.CreationTimestamp.Time.Format("2006-01-02 15:04") }</span>
    </div>
    <details class="mt-4 border-t border-gray-200 pt-3">
        <summary class="cursor-pointer select-none px-2 py-1 text-xs font-semibold text-gray-700 hover:bg-gray-100e">
            Update
        </summary>
        <div class="mt-3 flex justify-between items-center gap-4">
            <form method="post" action="/update-image" class="flex items-center gap-2 cursor-pointer">
                <input type="hidden" name="namespace" value={dep.Namespace} />
                <input type="hidden" name="deployment" value={dep.Name} />
                {{
                    prefix := image
                    oldTag := ""
                    idx := strings.LastIndex(image, ":")
                    if idx != -1 {
                        prefix = image[:idx]
                        oldTag = image[idx+1:]
                    }
                }}
                <input type="hidden" name="imagePrefix" value={prefix} />
                <input type="hidden" name="oldTag" value={oldTag} />
                <input
                    type="text"
                    name="tag"
                    placeholder="New tag"
                    class="border text-blue-400 border-blue-300 px-2 py-1 text-xs focus:outline-none focus:bg-blue-100 focus:text-gray-800 transition rounded-sm"
                    style="width:90px;"
                    required
                />
                <button type="submit" class="px-3 py-1 border bg-blue-300/40 border-blue-300 text-xs font-semibold text-gray-800 hover:bg-blue-200 focus:bg-blue-200 transition-colors rounded-sm">
                    Update Tag
                </button>
            </form>
            <form method="post" action="/restart" class="cursor-pointer">
                <input type="hidden" name="namespace" value={dep.Namespace} />
                <input type="hidden" name="deployment" value={dep.Name} />
                <button type="submit" class="px-3 py-1  border bg-blue-300/40 border-blue-300 text-xs font-semibold text-gray-800 hover:bg-blue-200 focus:bg-blue-200 transition-colors rounded-sm">
                    Restart
                </button>
            </form>
        </div>
    </details>
}

templ DeploymentCard(dep v1.Deployment, clientset *kubernetes.Clientset) {
    {{
        readyReplicas := dep.Status.ReadyReplicas
        totalReplicas := int32(0)
        if dep.Spec.Replicas != nil {
            totalReplicas = *dep.Spec.Replicas
        }
        isHealthy := readyReplicas == totalReplicas && totalReplicas > 0
        statusColor := "text-green-500"
        statusBg := "bg-green-100"
        statusText := "Healthy"
        if !isHealthy {
            if readyReplicas == 0 {
                statusColor = "text-red-500"
                statusBg = "bg-red-100"
                statusText = "Failed"
            } else {
                statusColor = "text-yellow-500"
                statusBg = "bg-yellow-100"
                statusText = "Degraded"
            }
        }
        image := ""
        if len(dep.Spec.Template.Spec.Containers) > 0 {
            image = dep.Spec.Template.Spec.Containers[0].Image
        }
        imageErrorReason := ""
        imageErrorMsg := ""
        if clientset != nil {
            // Defensive: ignore error, just show if available
            r, m, err := kubeapi.GetDeploymentImageError(clientset, dep.Namespace, dep.Name)

            if err != nil {
                log.Warnf("Failed to find image creation error: %v", err)
            }

            imageErrorReason = r
            imageErrorMsg = m
        }
    }}
    <div class="bg-white shadow-sm hover:shadow-md transition-shadow duration-200 flex flex-col h-full">
        @DeploymentCardHeader(dep, statusText, statusColor, statusBg)
        <div class="p-6 flex-1 flex flex-col justify-between">
            @DeploymentCardImage(image, imageErrorReason, imageErrorMsg)
            @DeploymentCardReplicas(readyReplicas, totalReplicas, isHealthy)
            @DeploymentCardActions(dep, image)
        </div>
    </div>
}

