// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.906
package views

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"k8s.io/client-go/kubernetes"
)

func Root(userEmail string, clientset *kubernetes.Clientset, namespace string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>Upkube</title><script src=\"https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4\"></script><link rel=\"preconnect\" href=\"https://fonts.googleapis.com\"><link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin><link href=\"https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap\" rel=\"stylesheet\"><style>\n                .poppins-thin { font-family: \"Poppins\", sans-serif; font-weight: 100; font-style: normal; }\n                .poppins-extralight { font-family: \"Poppins\", sans-serif; font-weight: 200; font-style: normal; }\n                .poppins-light { font-family: \"Poppins\", sans-serif; font-weight: 300; font-style: normal; }\n                .poppins-regular { font-family: \"Poppins\", sans-serif; font-weight: 400; font-style: normal; }\n                .poppins-medium { font-family: \"Poppins\", sans-serif; font-weight: 500; font-style: normal; }\n                .poppins-semibold { font-family: \"Poppins\", sans-serif; font-weight: 600; font-style: normal; }\n                .poppins-bold { font-family: \"Poppins\", sans-serif; font-weight: 700; font-style: normal; }\n                .poppins-extrabold { font-family: \"Poppins\", sans-serif; font-weight: 800; font-style: normal; }\n                .poppins-black { font-family: \"Poppins\", sans-serif; font-weight: 900; font-style: normal; }\n                .poppins-thin-italic { font-family: \"Poppins\", sans-serif; font-weight: 100; font-style: italic; }\n                .poppins-extralight-italic { font-family: \"Poppins\", sans-serif; font-weight: 200; font-style: italic; }\n                .poppins-light-italic { font-family: \"Poppins\", sans-serif; font-weight: 300; font-style: italic; }\n                .poppins-regular-italic { font-family: \"Poppins\", sans-serif; font-weight: 400; font-style: italic; }\n                .poppins-medium-italic { font-family: \"Poppins\", sans-serif; font-weight: 500; font-style: italic; }\n                .poppins-semibold-italic { font-family: \"Poppins\", sans-serif; font-weight: 600; font-style: italic; }\n                .poppins-bold-italic { font-family: \"Poppins\", sans-serif; font-weight: 700; font-style: italic; }\n                .poppins-extrabold-italic { font-family: \"Poppins\", sans-serif; font-weight: 800; font-style: italic; }\n                .poppins-black-italic { font-family: \"Poppins\", sans-serif; font-weight: 900; font-style: italic; }\n            </style></head><body class=\"bg-gray-100 text-gray-900 poppins-regular\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = Dashboard(userEmail, clientset, namespace).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "</body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
